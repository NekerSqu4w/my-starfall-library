local msl = class("multi_screen_rendering")
msl.debug_font = render.createFont("Courier New", 45, 0, true)

function msl:initialize(screen_list)
    self.screen_list = chip():getLinkedComponents()
    self.screen_index = {}
    self.screen = {}
    
    // make rt for screen
    for index, entity in pairs(self.screen_list) do
        render.createRenderTarget("mdl_rt_" .. entity:entIndex())
        self.screen_index[entity] = index
    end
end

function msl:update(show_id)
    local scrw, scrh = render.getResolution()
    local s = math.ceil(math.max(scrw, scrh))
    
    local screen_entity = render.getScreenEntity()
    local screen_index = self.screen_index[screen_entity]
    local initialized = screen_index and true or false
    local curx, cury = render.cursorPos()
    local screen_rt = "mdl_rt_" .. screen_entity:entIndex()
    
    if initialized == false then
        render.setFont(msl.debug_font)
        render.setRGBA(255,255,255,255)
        render.drawSimpleText(scrw / 2,scrh / 2,"no signal",1,1)
        
        return
    end
    
    
    render.setFont(render.getDefaultFont())
    render.selectRenderTarget(screen_rt)
    
    if self.screen[screen_index] then
        self.screen[screen_index](scrw,scrh,curx,cury)
    end
    
    render.selectRenderTarget()
    
    render.setRGBA(255,255,255,255)
    render.setRenderTargetTexture(screen_rt)
    render.drawTexturedRect(0,0,(1024 / scrw) * s,(1024 / scrw) * s)
    
    
    if show_id then
        render.setRGBA(255,70,70,255)
        render.drawRectOutline(0,0,scrw,scrh)
        
        render.setRGBA(255,70,70,150)
        render.drawRect(20,0,60,60)
        render.setFont(msl.debug_font)
        render.setRGBA(255,255,255,255)
        render.drawSimpleText(20 + 30,30,tostring(screen_index),1,1)
    end
end

return msl
